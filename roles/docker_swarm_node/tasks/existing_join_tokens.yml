- name: Fetch swarm status for managers
  command: docker info --format '{{ "{{json .Swarm}}" }}'
  register: docker_swarm_status
  when: "'docker_swarm_managers' in group_names"
  become: true

- name: Set swarm_local_node_state fact
  set_fact:
    swarm_local_node_state: "{{ docker_swarm_status.stdout | from_json | json_query('LocalNodeState') }}"

- name: Set swarm_control_available fact
  set_fact:
    swarm_control_available: "{{ docker_swarm_status.stdout | from_json | json_query('ControlAvailable') }}"

# Loop through managers to find an active one
- name: Find active swarm manager
  set_fact:
    active_swarm_manager: "{{ item }}"
    active_swarm_found: true
  loop: "{{ groups['docker_swarm_managers'] }}"
  when: >
    not active_swarm_found | default(false) and
    hostvars[item]['swarm_local_node_state'] is defined and
    hostvars[item]['swarm_local_node_state'] == 'active' and
    hostvars[item]['swarm_control_available'] | default(false)
  run_once: true

# Fetch tokens from the active manager if found
- name: Fetch tokens from active swarm manager
  community.docker.docker_swarm_info:
  register: swarm_info
  delegate_to: "{{ active_swarm_manager }}"
  when: >
    active_swarm_found | default(false) and
    hostvars[active_swarm_manager]['swarm_control_available'] | default(false)
  become: true

- name: Set join tokens from existing swarm
  set_fact:
    manager_join_token: "{{ swarm_info.swarm_facts.JoinTokens.Manager }}"
    worker_join_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
  when: >
    active_swarm_found | default(false) and
    swarm_info is defined and 'swarm_facts' in swarm_info
  run_once: true
