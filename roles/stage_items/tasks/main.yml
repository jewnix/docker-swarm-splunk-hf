- name: condition sanity check - failure indicates likely typo in condition
  debug:
    msg: "{{ item.condition }}"
  loop: "{{ stage_items }}"
  loop_control:
    label: "{{ item.condition|default('no condition, skip') }}"
  when: "'condition' in item"

- name: ensure dest is a valid staging_path
  assert:
    that: stage_item.dest in staging_paths
    fail_msg: "{{ stage_item.dest }} is not a configured staging_path"
    success_msg: "{{ stage_item.dest }} is a configured staging_path"
    quiet: yes
  loop: "{{ stage_items }}"
  loop_control:
    loop_var: stage_item
    label: "{{ stage_item.dest }}"
  when: "stage_item.condition|default(True)"

- name: create staging_path directory
  file:
    # staging_path_absolute_path is defined in vars/main.yml
    # it references stage_item
    path: "{{ staging_path_absolute_path }}"
    state: directory
  loop: "{{ stage_items }}"
  loop_control:
    loop_var: stage_item
    label: "{{ staging_path_absolute_path }}"

- include_tasks: "stage_{{ stage_item.type }}.yml"
  vars:
    # staging_path_absolute_path is defined in vars/main.yml
    stage_dest: "{{ staging_path_absolute_path }}/{{ stage_item.dest_sub_path | default('') }}"
  loop: "{{ stage_items }}"
  loop_control:
    loop_var: stage_item
    # when this was implemented, include_tasks with a loop doesn't print a label,
    # but explicitly setting label to prevent unexpected sensitive-value discloser
    # if in the future ansible _does_ print a label for include_tasks
    label: redacted
  when: "stage_item.condition|default(True)"
